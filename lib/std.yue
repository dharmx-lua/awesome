---Better utility functions. Supercharged by Neovim.

import "gears" as table:{:clone}

export table = {}
export string = {}

type_names =
  t: "table"
  s: "string"
  n: "number"
  b: "boolean"
  f: "function"
  c: "callable"
  ["table"]: "table"
  ["string"]: "string"
  ["number"]: "number"
  ["boolean"]: "boolean"
  ["function"]: "function"
  ["callable"]: "callable"
  ["nil"]: "nil"
  ["thread"]: "thread"
  ["userdata"]: "userdata"

_is_type = (val, t) -> type(val) == t or (t == "callable" and table.is_callable val)

---@private
_is_valid = (opt) ->
  if type(opt) ~= "table" then return false, "opt: expected table, got #{type opt}"
  for param_name, spec in pairs opt
    if type(spec) ~= "table"
      return false, "opt[#{param_name}]: expected table, got #{type spec}"
    val = spec[1] -- Argument value
    types = spec[2] -- Type name, or callable
    optional = (true == spec[3])

    if type(types) == "string" then types = { types }
    if table.is_callable types
      -- Check user-provided validation function
      valid, optional_message = types val
      if not valid
        error_message = "#{param_name}: expected #{spec[3] or "?"}, got #{val}"
        if optional_message ~= nil then error_message = "#{error_message}. Info: #{optional_message}"
        return false, error_message
    elseif type(types) == "table"
      success = false
      for i, t in ipairs types
        t_name = type_names[t]
        if not t_name then return false, "invalid type name: #{t}"
        types[i] = t_name
        if (optional and val == nil) or _is_type(val, t_name)
          success = true
          break
      if not success then return false, "#{param_name}: expected #{_G.table.concat types, "|"}, got #{type val}"
    else
      return false, "invalid type name: #{types}"
  true

export validate = (opt) ->
  ok, err_msg = _is_valid opt
  if not ok then error err_msg, 2

---@private
can_merge = (v) -> type(v) == "table" and (table.is_empty(v) or not table.is_list(v)) 

table_extend = (behavior, deep_extend, ...) ->
  if behavior ~= "error" and behavior ~= "keep" and behavior ~= "force"
    error "invalid 'behavior': #{behavior}"
  if select("#", ...) < 2
    error "wrong number of arguments (given #{1 + select "#", ...}, expected at least 3)"
  local ret = {}
  for i = 1, select("#", ...)
    local t = select(i, ...)
    validate ["after the second argument"]: { t, "t" }
    if t
      for k, v in pairs t
        if deep_extend and can_merge(v) and can_merge ret[k]
          ret[k] = table_extend behavior, true, ret[k], v
        elseif behavior ~= "force" and ret[k] ~= nil
          if behavior == "error"
            error "key found in more than one map: #{k}"
        else
          ret[k] = v
  ret

table.deepcopy = (t) -> clone t, true

table.sum = (t, s, f) ->
  assert table.is_list t
  acc = 0
  for _, i in ipairs table.slice t, s, f do acc += i
  acc

table.any = (f, t) ->
  for i in *t do if f i then return true, i
  return false, nil

table.map = (f, t) ->
  validate f: { f, "c" }, t: { t, "t" }
  {k, f v for k, v in pairs t}

table.zip = (...) ->
  arrays, ans = { ... }, {}
  index = 0
  ->
    index += 1
    for i, t in ipairs arrays
      if type(t) == "function"
        ans[i] = t!
      else
        ans[i] = t[index]
      if ans[i] == nil then return 
    _G.table.unpack ans

table.keys = (t) ->
  assert type(t) == "table", "Expected table, got #{type t}"
  [k for k, _ in pairs t]

table.values = (t) ->
  assert type(t) == "table", "Expected table, got #{type t}"
  [v for _, v in pairs t]

table.is_empty = (t) ->
  assert type(t) == "table", "Expected table, got #{type t}"
  next(t) == nil

table.extend = (behavior, ...) -> table_extend behavior, false, ... 

table.deep_extend = (behavior, ...) -> table_extend behavior, true, ... 

table.deep_equal = (a, b) ->
  if a == b then return true 
  if type(a) ~= type(b) then return false 
  if type(a) == "table"
    for k, v in pairs a do if not table.deep_equal(v, b[k]) then return false 
    for k, _ in pairs b do if a[k] == nil then return false 
    return true
  false

add_reverse_lookup = (o) ->
  keys = table.keys o
  for _, k in ipairs(keys)
    v = o[k]
    if o[v] then error "The reverse lookup found an existing value for '#{v}' while processing key '#{k}'"
    o[v] = k
  o

get = (o, ...) ->
  local keys = { ... }
  if #keys == 0 then return nil 
  for i, k in ipairs keys
    o = o[k]
    if o == nil then return nil
    elseif type(o) ~= "table" and next keys, i then return nil
  o

table.list_extend = (dst, src, start, finish) ->
  validate
    dst: { dst, "t" }
    src: { src, "t" }
    start: { start, "n", true }
    finish: { finish, "n", true }
  for i = start or 1, finish or #src do _G.table.insert dst, src[i]
  dst

table.flatten = (t) ->
  result = {}
  _table_flatten = (_t) ->
    n = #_t
    for i = 1, n
      v = _t[i]
      if type(v) == "table"
        _table_flatten v
      elseif v
        _G.table.insert result, v
  _table_flatten t
  result

table.is_list = (t) ->
  if type(t) ~= "table" then return false 
  count = 0
  for k, _ in pairs t do if type(k) == "number" then count += 1 else return false
  if count > 0 then return true 
  count == 0

table.count = (t) ->
  validate t: { t, "t" }
  count = 0
  for _ in pairs t do count += 1
  count

table.slice = (l, s, f) -> [l[i] for i = s or 1, f or #l]

table.is_callable = (f) ->
  if type(f) == "function" then return true 
  m = f.<>
  if m == nil then return false 
  type(m.__call) == "function"

table.default = (create) ->
  create = create or -> table.default! 
  <index>: (k) =>
    rawset @, k, create k
    rawget @, k

string.trim = (s) ->
  validate s: { s, "s" }
  s::match "^%s*(.*%S)" or ""

string.gsplit = (s, sep, opts) ->
  local plain
  trimempty = false
  if type(opts) == "boolean"
    plain = opts -- For backwards compatibility.
  else
    validate
      s: { s, "s" }
      sep: { sep, "s" }
      opts: { opts, "t", true }
    opts = opts or {}
    plain, trimempty = opts.plain, opts.trimempty

  start = 1
  done = false

  -- For `trimempty`: queue of collected segments, to be emitted at next pass.
  segs = {}
  empty_start = true -- Only empty segments seen so far.

  _pass = (i, j, ...) ->
    if i
      assert j + 1 > start, "Infinite loop detected"
      local seg = s::sub(start, i - 1)
      start = j + 1
      seg, ...
    else
      done = true
      s::sub start

  ->
    if trimempty and #segs > 0
      -- trimempty: Pop the collected segments.
      return _G.table.remove segs
    elseif done or (s == "" and sep == "")
      return nil
    elseif sep == ""
      if start == #s then done = true 
      return _pass(start + 1, start)
    seg = _pass s::find sep, start, plain

    -- Trim empty segments from start/.
    if trimempty and seg ~= ""
      empty_start = false
    elseif trimempty and seg == ""
      while not done and seg == ""
        _G.table.insert segs, 1, ""
        seg = _pass s::find sep, start, plain
      
      if done and seg == ""
        return nil
      elseif empty_start
        empty_start = false
        segs = {}
        return seg
      if seg ~= "" then _G.table.insert segs, 1, seg
      return _G.table.remove segs
    seg

string.split = (s, sep, opts) -> [c for c in string.gsplit s, sep, opts]
