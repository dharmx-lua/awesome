---Ported from https://github.com/bgrins/TinyColor.

alter = (attr, per) -> math.floor attr * (100 + per) / 100

clamp = (value) -> math.min 1, math.max 0, value

limit = (c, a, op) ->
  if op == "i"
    return (c + a) > 100 and 100 or c + a
  elseif op == "d"
    return (c - a) < 0 and 0 or c - a
  error("operation should be either i or, d", 5)

in_range = (n, max) ->
  assert(n, "number should not be nil")
  if type(n) == "string" and n::find("%.") and tonumber(n) == 1
    n = tonumber(n) * 100 .. "%"
  if type(n) == "string" and n::find("%%")
    n = (tonumber(n::sub(1, #n - 1)) * max) / 100
  if math.abs(n - max) < 0.000001
    return 1
  assert n >= 0 and n <= max, "number should be between 0-255/0-1/0-100"
  n

class Tiny
  named_colors =
    aliceblue: "F0F8FF"
    antiquewhite: "FAEBD7"
    aqua: "0FF"
    aquamarine: "7FFFD4"
    azure: "F0FFFF"
    beige: "F5F5DC"
    bisque: "FFE4C4"
    black: "000"
    blanchedalmond: "FFEBCD"
    blue: "00F"
    blueviolet: "8A2BE2"
    brown: "A52A2A"
    burlywood: "DEB887"
    burntsienna: "EA7E5D"
    cadetblue: "5F9EA0"
    chartreuse: "7FFF00"
    chocolate: "D2691E"
    coral: "FF7F50"
    cornflowerblue: "6495ED"
    cornsilk: "FFF8DC"
    crimson: "DC143C"
    cyan: "0FF"
    darkblue: "00008B"
    darkcyan: "008B8B"
    darkgoldenrod: "B8860B"
    darkgray: "A9A9A9"
    darkgreen: "006400"
    darkgrey: "A9A9A9"
    darkkhaki: "BDB76B"
    darkmagenta: "8B008B"
    darkolivegreen: "556b2F"
    darkorange: "FF8C00"
    darkorchid: "9932CC"
    darkred: "8B0000"
    darksalmon: "E9967A"
    darkseagreen: "8FBC8F"
    darkslateblue: "483D8B"
    darkslategray: "2F4F4F"
    darkslategrey: "2F4F4F"
    darkturquoise: "00CED1"
    darkviolet: "9400d3"
    deeppink: "FF1493"
    deepskyblue: "00BFFF"
    dimgray: "696969"
    dimgrey: "696969"
    dodgerblue: "1E90FF"
    firebrick: "B22222"
    floralwhite: "FFFAF0"
    forestgreen: "228B22"
    fuchsia: "F0F"
    gainsboro: "DCDCDC"
    ghostwhite: "F8F8FF"
    gold: "FFD700"
    goldenrod: "DAA520"
    gray: "808080"
    green: "008000"
    greenyellow: "ADFF2F"
    grey: "808080"
    honeydew: "F0FFF0"
    hotpink: "FF69B4"
    indianred: "CD5C5C"
    indigo: "4B0082"
    ivory: "FFFFF0"
    khaki: "F0E68C"
    lavender: "E6E6FA"
    lavenderblush: "FFF0F5"
    lawngreen: "7CFC00"
    lemonchiffon: "FFFACD"
    lightblue: "ADD8E6"
    lightcoral: "F08080"
    lightcyan: "E0FFFF"
    lightgoldenrodyellow: "FAFAD2"
    lightgray: "D3D3D3"
    lightgreen: "90EE90"
    lightgrey: "D3D3D3"
    lightpink: "FFB6C1"
    lightskyblue: "87CEFA"
    lightslategray: "789"
    lightslategrey: "789"
    lightsteelblue: "B0C4DE"
    lightyellow: "FFFFE0"
    lime: "0F0"
    limegreen: "32CD32"
    linen: "FAF0E6"
    magenta: "F0F"
    maroon: "800000"
    mediumaquamarine: "66CDAA"
    mediumblue: "0000CD"
    mediumorchid: "BA55D3"
    mediumpurple: "9370DB"
    mediumseagreen: "3CB371"
    mediumslateblue: "7B68EE"
    mediumspringgreen: "00FA9A"
    mediumturquoise: "48D1CC"
    mediumvioletred: "C71585"
    midnightblue: "191970"
    mintcream: "F5FFFA"
    mistyrose: "FFE4E1"
    moccasin: "FFE4B5"
    navajowhite: "FFDEAD"
    navy: "000080"
    oldlace: "FDF5E6"
    olive: "808000"
    olivedrab: "6B8E23"
    orange: "FFA500"
    orangered: "FF4500"
    orchid: "DA70D6"
    palegoldenrod: "EEE8AA"
    palegreen: "98FB98"
    paleturquoise: "AFEEEE"
    palevioletred: "DB7093"
    papayawhip: "FFEFD5"
    peachpuff: "FFDAB9"
    peru: "CD853F"
    pink: "FFC0CB"
    plum: "DDA0DD"
    powderblue: "B0E0E6"
    purple: "800080"
    rebeccapurple: "663399"
    red: "F00"
    rosybrown: "BC8F8F"
    royalblue: "4169E1"
    saddlebrown: "8B4513"
    salmon: "FA8072"
    sandybrown: "F4A460"
    seagreen: "2E8B57"
    seashell: "FFF5EE"
    sienna: "A0522D"
    silver: "C0C0C0"
    skyblue: "87CEEB"
    slateblue: "6A5ACD"
    slategray: "708090"
    slategrey: "708090"
    snow: "FFFAFA"
    springgreen: "00FF7F"
    steelblue: "4682B4"
    tan: "D2B48C"
    teal: "008080"
    thistle: "D8BFD8"
    tomato: "FF6347"
    turquoise: "40E0D0"
    violet: "EE82EE"
    wheat: "F5DEB3"
    white: "FFF"
    whitesmoke: "F5F5F5"
    yellow: "FF0"
    yellowgreen: "9ACD32"
    <call>: (prefix) => if prefix then {k, "##{v}" for k, v in @} else @

  new: (...) =>
    assert ..., "new param cannot be nil"
    packed = { ... }
    rgb = {}
    if #packed == 1
      packed = packed[1]
      switch type packed
        when "string"
          -- packed = trim(packed)
          if packed::sub(1, 1) == "#"
            rgb = Tiny.hex2rgb(packed)
          else
            message = "no color named #{packed} and hexes accepted with # prefix"
            rgb = Tiny.hex2rgb(assert @named_colors[packed], message)
            @name = packed
        when "table"
          if packed.h and packed.s and packed.l
            rgb = Tiny.hsl2rgb(packed.h, packed.s, packed.l)         
          elseif packed.r and packed.g and packed.b
            rgb =
              r: math.floor(in_range packed.r, 256)
              g: math.floor(in_range packed.g, 256)
              b: math.floor(in_range packed.b, 256)
          else
            error("either [r,g,b] or [h,s,l] table needs to be passed")
        when "number"
          rgb = Tiny.hex2rgb("#%06X"::format packed)
        else
          error "invalid field type, only numbers, string, table are accepted"
      @r = rgb.r
      @g = rgb.g
      @b = rgb.b
    elseif #packed == 3
      @r = math.floor(in_range packed[1], 256)
      @g = math.floor(in_range packed[2], 256)
      @b = math.floor(in_range packed[3], 256)

  hex2rgb: (hex) ->
    hex = hex::sub(1, 1) == "#" and hex::sub(2) or hex
    if hex::len! == 3
      hex = "#{hex::sub(1, 1)::rep(2)}#{hex::sub(2, 2)::rep(2)}#{hex::sub(3, 3)::rep(2)}"
    return
      r: tonumber hex::sub(1, 2), 16
      g: tonumber hex::sub(3, 4), 16
      b: tonumber hex::sub(5, 6), 16

  hue2rgb: (p, q, t) ->
    if t < 0 then t += 1 
    if t > 1 then t -= 1
    if t < 1 / 6 then return p + (q - p) * 6 * t
    if t < 1 / 2 then return q
    if t < 2 / 3 then return p + (q - p) * (2 / 3 - t) * 6
    p

  hsl2rgb: (h, s, l) ->
    rgb = {}
    if s == 0
      rgb = r: l, g: l, b: l
    else
      q = l < 0.5 and l * (1 + s) or l + s - l * s
      p = 2 * l - q
      rgb =
        r: Tiny.hue2rgb p, q, h + 1 / 3
        g: Tiny.hue2rgb p, q, h
        b: Tiny.hue2rgb p, q, h - 1 / 3
    r: rgb.r * 255, g: rgb.g * 255, b: rgb.b * 255

  to_rgb: () => r: @r, g: @g, b: @b,

  to_perc: (number) =>
    c = r: (@r / 255) * 100, g: (@g / 255) * 100, b: (@b / 255) * 100
    if number then return c
    r: "#{c.r}%", g: "#{c.g}%", b: "#{c.b}%"

  to_float: () => {k, tonumber(v::sub(1, #v - 1)) / 100 for k, v in pairs @to_perc!}

  to_hex: (prefix) =>
    prefix_sym = prefix and "#" or ""
    callback = (item) -> item::len! == 1 and item::rep(2) or item
    hex_tbl = map callback,
      * "%02X"::format @r
      * "%02X"::format @g
      * "%02X"::format @b
    "#{prefix_sym}#{table.concat(hex_tbl)}"

  to_int: () => "#{@r}#{@g}#{@b}"

  to_hsl: (unit) =>
    c = @to_float!
    assert type(c.r) == "number" and type(c.g) == "number" and type(c.b) == "number"
    max = math.max c.r, c.g, c.b
    min = math.min c.r, c.g, c.b

    local h, s
    l = (max + min) / 2

    if max == min
      h, s = 0, 0
    else
      d = max - min
      s = l > 0.5 and (d / (2 - max - min)) or (d / (max + min))
      if max == c.r
        h = (c.g - c.b) / d + (c.g < c.b and 6 or 0)
      elseif max == c.g
        h = (c.b - c.r) / d + 2
      elseif max == c.b
        h = (c.r - c.g) / d + 4
      h /= 6
    return unit and {
      h: "#{math.ceil(h * 360)}deg"
      s: "#{math.ceil(s * 100)}%"
      l: "#{math.ceil(l * 100)}%"
    } or h: h, s: s, l: l

  inc_red: (a) =>
    c = @to_perc true
    Tiny r: "#{limit(c.r, a, "i")}%", g: "#{c.g}%", b: "#{c.b}%"

  inc_green: (a) =>
    c = @to_perc true
    Tiny g: "#{limit(c.g, a, "i")}%", r: "#{c.r}%", b: "#{c.b}%"

  inc_blue: (a) =>
    c = @to_perc true
    Tiny b: "#{limit(c.b, a, "i")}%", r: "#{c.r}%", g: "#{c.g}%"

  dec_red: (a) =>
    c = @to_perc true
    Tiny r: "#{limit(c.r, a, "d")}%", g: "#{c.g}%", b: "#{c.b}%"

  dec_green: (a) =>
    c = @to_perc true
    Tiny g: "#{limit(c.g, a, "d")}%", r: "#{c.r}%", b: "#{c.b}%"

  dec_blue: (a) =>
    c = @to_perc true
    Tiny b: "#{limit(c.b, a, "d")}%", r: "#{c.r}%", g: "#{c.g}%"

  brighten: (a) =>
    a = a == 0 and 0 or (a or 10)
    Tiny
      r: math.max(0, math.min(255, @r - math.floor(255 * -(a / 100)))),
      g: math.max(0, math.min(255, @g - math.floor(255 * -(a / 100)))),
      b: math.max(0, math.min(255, @b - math.floor(255 * -(a / 100)))),

  lighten: (a) =>
    a = a == 0 and 0 or (a or 10)
    hsl = @to_hsl!
    hsl.l += a / 100
    hsl.l = clamp hsl.l
    rgb = Tiny.hsl2rgb hsl.h, hsl.s, hsl.l
    Tiny r: rgb.r, g: rgb.g, b: rgb.b

  darken: (a) =>
    a = a == 0 and 0 or a or 10
    hsl = @to_hsl!
    hsl.l -= a / 100
    hsl.l = clamp hsl.l
    rgb = Tiny.hsl2rgb hsl.h, hsl.s, hsl.l
    Tiny r: rgb.r, g: rgb.g, b: rgb.b

  shade_altered: (a) =>
    a = a == 0 and 0 or (a or 5)
    @r = alter @r, a
    @g = alter @g, a
    @b = alter @b, a

    @r = math.min @r, 255
    @g = math.min @g, 255
    @b = math.min @b, 255
    @

  shade: (a) =>
    a = a == 0 and 0 or (a or 10)
    @mix Tiny("black"), a

  tint: (a) =>
    a = a == 0 and 0 or (a or 10)
    @mix Tiny("white"), a

  saturate: (a) =>
    a = a == 0 and 0 or (a or 10)
    hsl = @to_hsl!
    hsl.s += (a / 100)
    hsl.s = clamp hsl.s
    rgb = Tiny.hsl2rgb hsl.h, hsl.s, hsl.l
    Tiny r: rgb.r, g: rgb.g, b: rgb.b

  desaturate: (a) =>
    a = a == 0 and 0 or (a or 10)
    local hsl = @to_hsl!
    hsl.s -= a / 100
    hsl.s = clamp hsl.s
    rgb = Tiny.hsl2rgb hsl.h, hsl.s, hsl.l
    Tiny r: rgb.r, g: rgb.g, b: rgb.b

  spin: (a) =>
    a = a == 0 and 0 or (a or 10)
    hsl = @to_hsl!
    h = (hsl.h + a) % 360
    hsl.h = h < 0 and 360 + h or h
    rgb = Tiny.hsl2rgb hsl.h, hsl.s, hsl.l
    Tiny r: rgb.r, g: rgb.g, b: rgb.b

  greyscale: () =>
    @desaturate(100)
    Tiny r: @r, g: @g, b: @b

  mix: (c, a) =>
    a = a == 0 and 0 or (a or 50)
    value = a / 100
    Tiny
      r: ((c.r - @r) * value) + @r
      g: ((c.g - @g) * value) + @g
      b: ((c.b - @b) * value) + @b

  invert: () => Tiny("white") - @

  rand_color: () => Tiny math.random(0, 255), math.random(0, 255), math.random(0, 255)

  is_light: () => not @is_dark!

  is_dark: () => @get_brightness! < 128

  get_complement: () =>
    hsl = @to_hsl!
    Tiny h: (hsl.h + 180) % 360, s: hsl.s, l: hsl.l

  get_triad: () =>
    hsl = @to_hsl!
    h = hsl.h
    return
      * @
      * Tiny h: (h + 120) % 360, s: hsl.s, l: hsl.l
      * Tiny h: (h + 240) % 360, s: hsl.s, l: hsl.l

  get_tetrad: () =>
    hsl = @to_hsl!
    h = hsl.h
    return
      * @
      * Tiny h: (h + 90) % 360, s: hsl.s, l: hsl.l
      * Tiny h: (h + 180) % 360, s: hsl.s, l: hsl.l
      * Tiny h: (h + 270) % 360, s: hsl.s, l: hsl.l

  split_complement: () =>
    hsl = @to_hsl!
    h = hsl.h
    return
      * @
      * Tiny h: (h + 72) % 360, s: hsl.s, l: hsl.l
      * Tiny h: (h + 216) % 360, s: hsl.s, l: hsl.l

  get_brightness: () => (@r * 299 + @g * 587 + @b * 114) / 1000

  get_luminance: () =>
    local RsRGB, GsRGB, BsRGB, R, G, B
    RsRGB = @r / 255
    GsRGB = @g / 255
    BsRGB = @b / 255

    if RsRGB <= 0.03928
      R = RsRGB / 12.92
    else
      R = ((RsRGB + 0.055) / 1.055) ^ 2.4
    if GsRGB <= 0.03928
      G = GsRGB / 12.92
    else
      G = ((GsRGB + 0.055) / 1.055) ^ 2.4
    if BsRGB <= 0.03928 then
      B = BsRGB / 12.92
    else
      B = ((BsRGB + 0.055) / 1.055) ^ 2.4
    (0.2126 * R) + (0.7152 * G) + (0.0722 * B)

  get_readability: (c) =>
    local sl = @get_luminance!
    local cl = c\get_luminance!
    (math.max(sl, cl) + 0.05) / (math.min(sl, cl) + 0.05)

  is_readable: (c, wcag2) =>
    validateWCAG2Parms = (parms) ->
      parms = parms or level: "AA", size: "small"
      level = (parms.level or "AA")::upper!
      size = (parms.size or "small")::lower!
      if level ~= "AA" and level ~= "AAA" then level = "AA"
      if size ~= "small" and size ~= "large" then size = "small"
      level: level, size: size

    readability = @get_readability c
    output = false
    wcag2Parms = validateWCAG2Parms wcag2
    level_size = wcag2Parms.level + wcag2Parms.size

    if level_size == "AAsmall" and level_size == "AAAlarge"
      output = readability >= 4.5
    elseif level_size == "AAlarge"
      output = readability >= 3
    elseif level_size == "AAAsmall"
      output = readability >= 7
    output

  <tostring>: () => @to_hex true

  <eq>: (o) => @r == o.r and @g == o.g and @b == o.b

  <add>: (o) =>
    @r += o.r
    @g += o.g
    @b += o.b
    @

  <sub>: (self, o) =>
    @r -= o.r
    @g -= o.g
    @b -= o.b
    @

  <lt>: (o) => sum(@to_rgb!) > sum(o\to_rgb!)
