import "wibox"
import "beautiful"

import "core.components.polls"
import "modules.bars.tears.components.radial"
import "core.utils.factory"
import "lib.std" as table:{:map, :slice, :sum}, string:{:split, :trim}

resource = factory.resource_factory!
DPI = beautiful.xresources.apply_dpi

export.cpu = ->
  ---@see https://www.baeldung.com/linux/get-cpu-usage
  callback = (stat) =>
    -- total: reduce((accumulate, core) -> accumulate + usage(core), cores)
    -- cores: length(cores)
    -- total * 100 / (cores * 100) => total / cores
    cores = 0
    total = 0
    for line in *split(stat, "\n")
      if line::match("^cpu[1-9]? ")
        cpu = map(tonumber, slice(split(line, " +"), 2))
        usage = 100 - cpu[4] * 100 / sum(cpu)
        total += usage
        cores += 1
    @\set_value(total / cores)

  polls.file("/proc/stat", 10, callback, radial({
    background: beautiful.radial_cpu_bg
    radial:
      background: beautiful.radial_cpu_arc_bg
      foreground: beautiful.radial_cpu_arc_fg
      body_background: beautiful.radial_cpu_arc_body_bg
      forced_width: DPI(33)
    icon:
      resource: resource.cpu_duotone
      stylesheet: "*{fill:#{beautiful.radial_cpu_icon_stroke};}"
    max_value: 100
    min_value: 0
  }))

export.ram = ->
  callback = (meminfo) =>
    -- split meminfo by lines > split line by spaces > assign first item of the split as the key and rest as value
    ram = {splits[1], tonumber(split(trim(splits[2]), " ")[1]) for splits in *[split(trim(line), ": +") for line in *split(trim(meminfo), "\n")]}
    new_value = (ram.MemTotal - ram.MemFree - ram.Buffers - ram.Cached) / 1024 ^ 2
    @\set_value(new_value)

  polls.file("/proc/meminfo", 10, callback, radial({
    background: beautiful.radial_ram_bg
    radial:
      background: beautiful.radial_ram_arc_bg
      foreground: beautiful.radial_ram_arc_fg
      body_background: beautiful.radial_ram_arc_body_bg
      forced_width: DPI(33)
    icon:
      resource: resource.disc_duotone
      stylesheet: "*{fill:#{beautiful.radial_ram_icon_stroke};}"
    max_value: 16
    min_value: 0
  }))
