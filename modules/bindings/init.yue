import "awful"
import "gears"

import "lib.std" as table:{:is_list}
import "core.utils.factory"
import "core.utils.helpers"

-- exclude file patterns
excludes =
  * "^init%.lua$"
  * "^mouse%.lua$"
  * ".*%.yue$"
  -- simulate excludes.contains(some_file) by excludes[some_file]
  <index>: (file) => #[pattern for pattern in *@ when file::match(pattern)] > 0

-- walk through a directory and import files
for file, _ in helpers.walk("#{gears.filesystem.get_configuration_dir!}modules/bindings")
  if not excludes[file] -- do not import the file if it has been excluded
    stem = helpers.stem(file)
    bindings = require("modules.bindings.#{stem}") -- "/a/b/c/d.lua" -> "d"
    -- assign filename as the default binding group
    if is_list(bindings) then bindings = [stem]: bindings
    factory.apply_bindings(bindings, false, awful.keyboard.append_global_keybinding)

import "modules.bindings.mouse"
factory.apply_bindings(mouse: mouse, true, awful.mouse.append_global_mousebinding)

do
  <- client.connect_signal("request::default_mousebindings")
  import "modules.bindings.node.mouse" as node_mouse
  factory.apply_bindings(mouse: node_mouse, true, awful.mouse.append_client_mousebinding)

do
  <- client.connect_signal("request::default_keybindings")
  import "modules.bindings.node.keyboard" as node_keyboard
  factory.apply_bindings(keyboard: node_keyboard, false, awful.keyboard.append_client_keybinding)
